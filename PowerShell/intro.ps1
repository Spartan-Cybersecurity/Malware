# Ejercicio de PowerShell para entender conceptos básicos

# 1. Declaración de variables
# Aquí creamos una variable llamada $mensaje que almacenará un texto simple.
$mensaje = "Hola, bienvenidos al curso de desarrollo de malware para ethical hackers!"

# Imprimir el mensaje en la consola
Write-Host $mensaje

# 2. Función para convertir texto en un arreglo de bytes
# Esta función toma un string como entrada y lo convierte en un arreglo de bytes.
# Esto es fundamental para manipular datos en el contexto de cifrado y otros usos de bajo nivel.
function ConvertirTextoABytes($texto) {
    [Byte[]] $bytes = [System.Text.Encoding]::UTF8.GetBytes($texto)
    return $bytes
}

# 3. Usar la función para convertir un texto en bytes
# Creamos un texto de ejemplo y luego lo convertimos en bytes usando la función definida anteriormente.
$textoDeEjemplo = "Este es un ejemplo de texto."
$bytesDelTexto = ConvertirTextoABytes $textoDeEjemplo

# Imprimir los bytes en consola
Write-Host "Bytes del texto: $bytesDelTexto"

# 4. Función para contar el número de bytes en un arreglo
# Esta función es útil para comprender cómo manejar datos binarios y contar su longitud.
function ContarBytes($arregloDeBytes) {
    return $arregloDeBytes.Length
}

# Contar los bytes del texto de ejemplo
$cantidadDeBytes = ContarBytes $bytesDelTexto

# Imprimir la cantidad de bytes
Write-Host "Cantidad de bytes en el texto: $cantidadDeBytes"

# 5. Bucle para iterar sobre los bytes y mostrar su valor hexadecimal
# Este bucle recorrerá cada byte en el arreglo y mostrará su representación en hexadecimal.
Write-Host "Valores hexadecimales de cada byte:"
foreach ($byte in $bytesDelTexto) {
    # Convertir el byte a hexadecimal
    $valorHex = "{0:X2}" -f $byte
    Write-Host $valorHex
}

# 6. Función simple de cifrado por desplazamiento (Cifrado César)
# Esta función desplaza cada byte en el texto una cierta cantidad de lugares.
function CifradoDesplazamiento($arregloDeBytes, $desplazamiento) {
    $resultado = @()
    foreach ($byte in $arregloDeBytes) {
        # Desplazar el byte y almacenarlo en el arreglo de resultados
        $resultado += ($byte + $desplazamiento) % 256
    }
    return $resultado
}

# Aplicar un cifrado de desplazamiento de 3 posiciones a los bytes del texto
$bytesCifrados = CifradoDesplazamiento $bytesDelTexto 3

# Mostrar los bytes cifrados en hexadecimal
Write-Host "Bytes cifrados (desplazamiento de 3 posiciones):"
foreach ($byte in $bytesCifrados) {
    $valorHex = "{0:X2}" -f $byte
    Write-Host $valorHex
}

# 7. Descifrado del texto cifrado
# Se descifra aplicando un desplazamiento negativo equivalente
$bytesDescifrados = CifradoDesplazamiento $bytesCifrados -3

# Convertir los bytes descifrados de vuelta a texto
$textoDescifrado = [System.Text.Encoding]::UTF8.GetString($bytesDescifrados)

# Mostrar el texto descifrado
Write-Host "Texto descifrado: $textoDescifrado"

